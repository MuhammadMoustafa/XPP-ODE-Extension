{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "XPP",
  "patterns": [
    { "include": "#constants" },
    { "include": "#keywords" },
    { "include": "#derivatives" },
    { "include": "#functions" },
    { "include": "#variables" },
    { "include": "#strings" },
    { "include": "#comments" },
    { "include": "#operators" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "support.function.builtin.xpp",
          "match": "(?i)\\b(sin|cos|tan|atan|atan2|sinh|cosh|tanh|exp|delay|ln|log|log10|asin|acos|heav|sign|ceil|flr|ran|abs|del_shft|max|min|normal|besselj|bessely|erf|erfc|hom_bcs|sum|shift|not|$)\\b"
        },
        {
          "name": "support.function.builtin.xpp",
          "match": "@"
        },
        {
          "name": "keyword.control.conditional.xpp",
          "match": "(?i)\\b(if|only|else|then|set)\\b"
        },
        {
          "name": "keyword.operator.assignment.xpp",
          "match": "="
        },
        {
          "name": "keyword.other.reserved.xpp",
          "match": "(?i)\\b(parameter|param|par|bdry|bndry|volt|init|aux|global|markov|wiener|table|done|include)\\b"
        },
        {
          "name": "keyword.other.reserved.xpp.options",
          "match": "(?i)\\b(total|dt|xlo|xhi|ylo|yhi|Nplot|xp.*?|yp.*?)(?==)\\b"
        },
        {
          "name": "keyword.other.reserved.auto.options",
          "match": "(?i)\\b(DS|EPSU|EPSS|DSMIN|DSMAX|Ntst|NMAX|MAXSTOR|BOUNDS|NPR|NORMMIN|NORMMAX|autoxmin|autoxmax|autoymin|autoymax|parmin|parmax)\\b"
        }
      ]
    },
    "derivatives": {
      "patterns": [
        {
          "match": "(d)([^/]+)(\\/dt)",
          "captures": {
            "1": { "name": "entity.name.function.derivative.xpp" },
            "2": { "name": "variable.other.var.xpp" },
            "3": { "name": "entity.name.function.derivative.xpp" }
          }
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)'",
          "captures": {
            "1": { "name": "variable.other.var.xpp" },
            "2": { "name": "entity.name.function.derivative.xpp" }
          }
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\(t\\)",
          "captures": {
            "1": { "name": "variable.other.var.xpp" }
          }
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\(t\\+1\\)",
          "captures": {
            "1": { "name": "variable.other.var.xpp" }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.xpp",
          "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
		  "end": "\\)\\s*(=|\\n)",
          "beginCaptures": {
            "1": { "name": "entity.name.function.xpp" }
          },
          "endCaptures": {
            "0": { "name": "keyword.operator.assignment.xpp" }
          },
          "patterns": [
			{
			  "name": "variable.parameter.xpp",
			  "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*\\n)"
            },
            {
              "name": "punctuation.separator.xpp",
              "match": ","
            },
            {
              "include": "#strings"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#derivatives"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.var.xpp",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?==)"
        },
        {
          "name": "variable.parameter.xpp",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.xpp",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.xpp",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.xpp",
          "match": "#(?!include|done).*"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.xpp",
          "match": "\\b[0-9]+\\.?[0-9]*([eE][+-]?[0-9]+)?\\b"
        },
        {
          "name": "constant.language.xpp",
          "match": "(?i)\\b(pi|t|e)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.xpp",
          "match": "[+\\-*/^]"
        },
        {
          "name": "keyword.operator.comparison.xpp",
          "match": "(>|<|==|>=|<=|!=)"
        },
        {
          "name": "keyword.operator.assignment.xpp",
          "match": "="
        },
        {
          "name": "punctuation.definition.group.xpp",
          "match": "[(){}]"
        }
      ]
    }
  },
  "scopeName": "source.xpp",
  "fileTypes": ["ode", "inc"],
  "Language": "XPPAUT"
}
