{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "XPP",
	"patterns": [
	  { "include": "#keywords" },
	  { "include": "#strings" },
	  { "include": "#variables" },
	  { "include": "#comments" },
	  { "include": "#constants" },
	  { "include": "#operators" }
	],
	"repository": {
	  "variables": {
		"patterns": [
		  {
			"name": "variable.language.derivative.xpp",
			"match": "(?i)\\b(d)([a-z_][a-z0-9_]*)(\\/dt)\\b",
			"captures": {
			  "1": { "name": "keyword.operator.derivative.xpp" },
			  "2": { "name": "variable.other.xpp" },
			  "3": { "name": "keyword.operator.derivative.xpp" }
			}
		  },
		  {
			"name": "variable.other.xpp",
			"match": "(?i)\\b[a-z_][a-z0-9_]*\\b(?=\\s*=)"
		  },
		  {
			"name": "variable.parameter.xpp",
			"match": "(?i)(?<=\\b[a-z_][a-z0-9_]*\\()([a-z_][a-z0-9_]*(?:\\s*,\\s*[a-z_][a-z0-9_]*)*)(?=\\))"
		  },
		  {
			"name": "variable.parameter.use.xpp",
			"match": "(?i)\\b[a-z_][a-z0-9_]*\\b"
		  },
		  {
			"name": "entity.name.function.xpp",
			"match": "(?i)\\b([a-z_][a-z0-9_]*)\\s*\\(([^)]*)\\)\\s*=",
			"captures": {
			  "1": { "name": "variable.function.xpp" },
			  "2": { "name": "variable.parameter.xpp" }
			}
		  },
		  {
			"name": "variable.other.constant.xpp",
			"match": "(?i)\\b([a-z_][a-z0-9_]*)(?=\\s*=\\s*[^a-z_])"
		  },
		  {
			"name": "variable.assignment.xpp",
			"match": "(?<=@\\s*)\\b(sin|cos|tan|exp|log|pi|if|else|min|max)\\b",
			"captures": {
			  "0": { "name": "variable.assignment.xpp" }
			}
		  }
		]
	  },
	  "keywords": {
		"patterns": [
		  {
			"name": "keyword.control.xpp",
			"match": "(?i)\\b(parameter|param|par|bdry|bndry|volt|init|aux|global|markov|wiener|table)\\b"
		  },
		  {
			"name": "keyword.control.conditional.xpp",
			"match": "(?i)(?<![a-z0-9])(if|only|else|then|set|done)(?![a-z0-9])"
		  },
		  {
			"name": "support.function.builtin.xpp",
			"match": "(?i)(?<![a-z0-9])(sin|cos|tan|atan|atan2|sinh|cosh|tanh|exp|delay|ln|log|log10|t|pi|if|then|else|asin|acos|heav|sign|ceil|flr|ran|abs|del_shft|max|min|normal|besselj|bessely|erf|erfc|hom_bcs|sum|shift|not|@|$)(?![a-z0-9])"
		  },
		  {
			"name": "invalid.include.xpp",
			"match": "(?<!#)\\binclude\\b",
			"captures": {
			  "0": { "name": "invalid.illegal.include.xpp" }
			}
		  },
		  {
			"name": "keyword.control.done.xpp",
			"match": "(?<=^\\s*)#done\\b",
			"captures": {
			  "0": { "name": "keyword.control.xpp" }
			}
		  }
		]
	  },
	  "strings": {
		"patterns": [
		  {
			"name": "string.quoted.double.xpp",
			"begin": "\"",
			"end": "\"",
			"patterns": [
			  { "name": "constant.character.escape.xpp", "match": "\\\\." }
			]
		  }
		]
	  },
	  "comments": {
		"patterns": [
		  {
			"name": "comment.line.xpp",
			"match": "#(?!include|done).*"
		  },
		  {
			"name": "keyword.directive.include.xpp",
			"match": "#include\\b.*"
		  },
		  {
			"name": "keyword.directive.done.xpp",
			"match": "#done\\b.*"
		  }
		]
	  },
	  "constants": {
		"patterns": [
		  {
			"name": "constant.numeric.xpp",
			"match": "\\b[0-9]+\\.?[0-9]*([eE][+-]?[0-9]+)?\\b"
		  },
		  {
			"name": "constant.language.xpp",
			"match": "(?i)(?<![a-z])\\b(pi|t|e)\\b(?![a-z])"
		  }
		]
	  },
	  "operators": {
		"patterns": [
		  {
			"name": "keyword.operator.arithmetic.xpp",
			"match": "[+\\-*/^]"
		  },
		  {
			"name": "keyword.operator.comparison.xpp",
			"match": "(>|<|==|>=|<=|!=)"
		  },
		  {
			"name": "punctuation.parenthesis.xpp",
			"match": "[(){}]"
		  }
		]
	  }
	},
	"scopeName": "source.xpp"
  }
  